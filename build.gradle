buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "groovy"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "application"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "com.github.node-gradle.node"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.liquibase.gradle"
    id "org.sonarqube"
    id "com.github.johnrengelman.shadow"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.objectcomputing"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=1.8
targetCompatibility=1.8
assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13" || "14"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    // TODO what are our equivalent gae deps?
//    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
//    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom 'io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}'
        }
    }
    appengineStage.dependsOn thinResolve
}


idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "run"

mainClassName = "com.objectcomputing.GroovyjhipsterApp"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=com.objectcomputing.*',
        "-Amicronaut.processing.group=$project.group",
        "-Amicronaut.processing.module=$project.name",
    ])
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver "org.h2.Driver"
            url "jdbc:h2:file:./build/h2db/db/groovyjhipster"
            username "groovyjhipster"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "org.h2.Driver"
            url "jdbc:h2:file:./build/h2db/db/groovyjhipster"
            username "groovyjhipster"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.objectcomputing.domain?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

shadowJar {
    mergeServiceFiles()
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

configurations {
    providedRuntime
}

    // This is due to a conflict between JHipster and Micronaut Liquibase
    // When micronaut-liquibase supports a version higher than 3.8.0
    // this can likely be removed
    configurations.all {
        resolutionStrategy.force 'org.liquibase:liquibase-core:3.8.9'
    }

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}")
        annotationProcessor platform("io.micronaut:micronaut-bom:${micronaut_version}")
        implementation platform("io.micronaut:micronaut-bom:${micronaut_version}")
    }

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronaut_data_version"

    //DEMO: Groovy dependencies
    compileOnly("io.micronaut:micronaut-inject-groovy")
    implementation "io.micronaut.groovy:micronaut-runtime-groovy"

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation (group: "io.github.jhipster", name: "jhipster-framework") {
        exclude group: "org.springframework", module: "spring-context-support"

        exclude group: "org.springframework.boot", module: "spring-boot-autoconfigure"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-aop"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-web"
    }
    implementation "org.simplejavamail:simple-java-mail:$simplejavamail_version"
    implementation "javax.annotation:javax.annotation-api"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "io.micronaut.cache:micronaut-cache-core"
    implementation "javax.cache:cache-api"
    implementation "org.hibernate:hibernate-core"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.ehcache:ehcache"
    implementation "io.micronaut.cache:micronaut-cache-ehcache"
    implementation "org.hibernate:hibernate-jcache"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath

    implementation "io.micronaut:micronaut-inject:$micronaut_version"
    implementation "io.micronaut:micronaut-validation:$micronaut_version"
    implementation "io.micronaut:micronaut-runtime:$micronaut_version"
    implementation "io.micronaut:micronaut-http-client:$micronaut_version"
    implementation "io.micronaut:micronaut-http-server-netty:$micronaut_version"
    implementation "io.micronaut:micronaut-management:$micronaut_version"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "io.micronaut.views:micronaut-views-thymeleaf"

    implementation "org.mindrot:jbcrypt:$jbcrypt_version"

    implementation "io.micronaut.liquibase:micronaut-liquibase"
    implementation "io.micronaut.sql:micronaut-jdbc-hikari"
    implementation "io.micronaut.jmx:micronaut-jmx"
    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
    implementation "io.micronaut.data:micronaut-data-runtime:$micronaut_data_version"
    implementation ("io.micronaut.data:micronaut-data-hibernate-jpa:$micronaut_data_version") {
        exclude group: 'io.micronaut', module: 'micronaut-jdbc'
    }
    implementation("io.micronaut.data:micronaut-data-jdbc:$micronaut_data_version") {
        exclude group: 'io.micronaut', module: 'micronaut-jdbc'
    }

    implementation "javax.mail:javax.mail-api:$javax_mail_version"
    implementation "com.sun.mail:javax.mail:$javax_mail_version"
    implementation "org.zalando:problem:$problem_version"
    implementation "org.zalando:problem-violations:$problem_version"
    implementation "org.zalando:jackson-datatype-problem:$problem_version"

    implementation ("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators"
    implementation "mysql:mysql-connector-java"
    liquibaseRuntime "mysql:mysql-connector-java"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstruct_version"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:$hibernate_version"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:$jaxb_runtime_version"

    // Micronaut test deps
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronaut_version")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.data:micronaut-data-processor:$micronaut_data_version"
    testAnnotationProcessor "org.glassfish.jaxb:jaxb-runtime:$jaxb_runtime_version"
    testImplementation platform("io.micronaut:micronaut-bom:$micronaut_version")
    testImplementation "io.micronaut.test:micronaut-test-junit5"

    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunit_junit5_version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunit_junit5_version}"
    testImplementation "com.h2database:h2"
    liquibaseRuntime "com.h2database:h2"

    //DEMO: Spock dependencies
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronaut_version"))
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

    testImplementation("io.micronaut.test:micronaut-test-spock")
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.5"
}


if (project.hasProperty("nodeInstall")) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

compileJava.dependsOn processResources

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs += ['src/main/java'] }
    }
}
